<link rel="import" href="../../../bower_components/polymer/polymer-element.html" />
<link rel="import" href="../../../bower_components/iron-ajax/iron-ajax.html" />
<link rel="import" href="../../../bower_components/paper-spinner/paper-spinner.html" />
<link rel="import" href="../elements/lt-model-card.html" />

<dom-module id="lt-model-page">
	<template>
		<style include="lt-style">
			:host {
                display: block;
                padding: 15px 25px;
                box-sizing: border-box;
			}
			.header{
				color: rgba(0,0,0,0.6);
			}
			.header span:last-child{
				color :  var(--app-primary-blue);
			}
			.title{
				font-size: 16px;
				padding: 20px 0;
				display: flex;
				justify-content: space-between;
				align-items: center;
			}
			.title .name .series{
				display: inline-block;
				padding-left: 10px;
				border-left: 2px solid #999;
				margin-left: 5px
			}
			.title .name span:last-child{
				display: inline-block;
				margin-left: 10px;
				color:var(--app-primary-blue);
			}
			.title .sort .sortItem{
				display: inline-block;
				width: 100px;
				height: 33px;
				background: #fff;
				text-align: center;
				line-height: 33px;
				color: var(--app-primary-blue);
				margin-left: 10px;
				border-radius: 2px;
				font-size: 14px;
			}
			.title .sortItem.iron-selected{
				background-color: var(--app-primary-blue);
				color: #fff;
			}
			/*箭头方向*/
			.title .sortItem.down::after{
				content: url(../../../images/sorting_down.png);
				top: 4px;
				position: relative;
			}
			.title .sortItem.up::after{
				content: url(../../../images/sorting_up.png);
				top: 4px;
				position: relative;
			}
			.title .sortItem.down.iron-selected::after{
				content: url(../../../images/sorting_down_selected.png);
			}
			.title .sortItem.up.iron-selected::after{
				content: url(../../../images/sorting_up_selected.png);
			}
			.carList{
				display: flex;
				/*justify-content: space-between;*/
				flex-wrap: wrap;
			}
			footer{
				text-align: center;
			}
			@media screen and (max-width:620px){
				:host{
					padding: 10px;
					font-size: 14px;
				}
				.title{
					flex-direction: column;
					align-items: flex-start;
				}
				.title .sort .sortItem{
					margin-top: 10px;
				}
				.carList{
					flex-direction: column;
				}
			}
		</style>
		<div class="pageContainer">
			<div class="header">
				当前位置：<span>首页</span> > <span>{{vehicleSalesPage.brandName}}</span> > <span>{{vehicleSalesPage.seriesName}}</span>
			</div>
			<div class="title">
				<div class="name">
					<span class="brand">{{vehicleSalesPage.brandName}}</span>
					<span class="series">{{vehicleSalesPage.seriesName}}</span>
					<span>共有{{vehicleSalesPage.count}}款型号</span>
				</div>
				<div class="sort">
					<iron-selector fallback-selection="PRICE" selected="{{sortType}}" attr-for-selected="id">
						<div class="sortItem down" id="PRICE" on-click="_toggleSort">
							按价格
						</div>
						<!-- <div class="sortItem down" id="type" on-click="_toggleSort">
							按类型
						</div>
						<div class="sortItem down" id="seat" on-click="_toggleSort">
							按座位
						</div>
						<div class="sortItem down" id="lastest" on-click="_toggleSort">
							最新购买
						</div> -->
					</iron-selector>
				</div>
			</div>
			<div class="carList">
				<template is="dom-repeat" items="{{modelList}}">
					<lt-model-card data="{{item}}" on-click="_getDetail"></lt-model-card>
				</template>
			</div>
			<footer>
				<paper-spinner active="{{isLoading}}" hidden="{{withoutData}}"></paper-spinner>
				<div hidden="{{!withoutData}}">
					已加载全部数据
				</div>
			</footer>
		</div>
		<!-- 获取车型 -->
		<iron-ajax
		    id="getVehicleSales"
		    method="POST"
		    url="{{_calURL('shop/getVehicleSales')}}"
		    Content-Type="application/json"
		    handle-as="json"
		    loading="{{isLoading}}"
		    on-response="_responseVehicleSales">
		</iron-ajax>
	</template>
	<script>
		class ltModelPage extends ltMixin(Polymer.Element){
			static get is(){return 'lt-model-page'}
			static get properties(){
				return{
					sortType:String,
					page : {
						type : String,
						observer : "_pageChange"
					},
					pageNumber :{
						type : Number,
					},
					maxResults : {
						type : String,
						value : "6"
					},
					withoutData : {
						type : Boolean,
						value : false
					},
					modelList : {
						type : Array,
						value : ()=>{
							return []
						}
					}
				}
			}
			static get observers (){
				return [
					'_bodyChange(pageNumber,sortType)'
				]
			}
			//跳转到车辆详情
			_getDetail (e){
				// console.log(e);
				var uid = e.model.__data.item.uid;
				location.hash = "#/car-detail/" + uid;
			}
			// 获取车辆响应
			_responseVehicleSales(e){
				var arr = e.detail.response.vehicleSalesPage.vehicleStockSingleViewList || [];
				if(arr.length == 0){
					this.withoutData = true;
				}else{
					this.vehicleSalesPage = e.detail.response.vehicleSalesPage;
					this.withoutData = false;
					this.set('modelList',this.modelList.concat(arr))
				}
			}
			_bodyChange(num,sortType){
				if(num || num == 0){
					if(sortType){
						// 判断升序降序
						var sortOrder;
						var ind = this.$[sortType].className.indexOf('down');
						if(ind == -1){
							sortOrder = "ASC";
						}else{
							sortOrder = "DESC"
						}
						this.$.getVehicleSales.body = {
							"maxResults" : this.maxResults,
							"pageNumber" : num,
							"sortOrder" : sortOrder,
							"sortType" : sortType,
							"brandId" : this.brandId,
							"seriesId" : this.seriesId
						}
						this.$.getVehicleSales.generateRequest();
					}
				}
			}
			constructor(){
				super();
				// 定义滚动监听事件
				this._boundListener = this.scrollFun.bind(this);
			}
			scrollEvent (){
				// 判断是否滚动到底部
				var scrollTop = this.getScrollTop() , scrollHeight = this.getScrollHeight(),clientHeight = this.getWindowHeight();
				if(scrollTop + clientHeight == scrollHeight){
			    　　//当滚动到底部时,执行此代码
			    	if(!this.withoutData){
			    		this.pageNumber++;
			    	}
			　　}
			}
			// scroll 函数
			scrollFun(){
				var timeoutRef,that = this;
				// 防止一直频繁调用；
			    if(timeoutRef){
			        clearTimeout(timeoutRef);
			    }
			    timeoutRef = setTimeout(that.scrollEvent(), 50);
			}
			_pageChange(val){
				if(val == "model"){
					this.brandId  = localStorage.getItem('brandId');
					this.seriesId = localStorage.getItem('seriesId');
					if(this.brandId && this.seriesId){
						// 初始化model list
						this.set('modelList',[]);
						//一开始取第一页;
						if(this.pageNumber == 0){
							this._bodyChange(0,this.sortType);
						}else{
							this.pageNumber = 0;
						}
						window.addEventListener('scroll', this._boundListener);
					}
				}else{
					window.removeEventListener('scroll', this._boundListener)
				}
			}
			show(){
            	this.style.display= 'block';
            }
            hide(){
            	this.dispatchEvent(new CustomEvent('hide',{}),false);
            	this.style.display= 'none';
            }
            _toggleSort(e){
            	var target = e.composedPath()[0];
            	// 判断是否点击自己
            	if(target.id == this.sortType){
            		// 通过class，排序判断
            		if(target.className.indexOf("down") == -1){
            			target.classList.remove("up");
            			target.classList.add("down");
            		}else{
            			target.classList.remove("down");
            			target.classList.add("up");
            		}
            		// 先清空列表
            		this.set('modelList',[]);

            		if(this.pageNumber == 0){
            			this._bodyChange(0,this.sortType);
            		}else{
            			this.pageNumber = 0;
            		}

            	}
            }
		}
		customElements.define(ltModelPage.is,ltModelPage)
	</script>
</dom-module>

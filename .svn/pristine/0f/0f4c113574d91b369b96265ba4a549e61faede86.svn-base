<link rel="import" href="../../../bower_components/polymer/polymer-element.html" />
<link rel="import" href="../../../bower_components/iron-ajax/iron-ajax.html" />
<link rel="import" href="../lt-mixin.html" />
<link rel="import" href="../lt-style.html" />
<dom-module id="lt-download-page">
    <template>
        <style include="lt-style">
            :host{
                box-sizing: border-box;
                margin: 0;
                padding: 0;
            }
            *{
                box-sizing: border-box;
            }
          </style>

  <div class="pageContainer">
  <img id="logo" src="./images/app_cover.jpg" />
  </div>

    </template>

    <script>
            /**
           * @customElement
           * @polymer
           */
        class ltDownloadPage extends ltMixin(Polymer.Element) {
            static get is() { return 'lt-download-page'; }
            static get properties() {
                return {
                    // 所有panel对应的scrollTop
                    panelsScrollTop :{
                        type : Array,
                        value : ()=>{
                            return []
                        }
                    },
                    page : String,
                    flag : String,
                    vehicleId : {
                        type : String,
                        // observer : "_checkId"
                    },
                    data : {
                        type : Object
                    },
                    state : {
                        type : String
                    }
                }
            }
            static get observers() {
                return [
                    "_checkId(vehicleId,page,flag)",
                    "_checkFlag(data.flag)"
                ]
            }
            // 是否已售或已预订
            _checkFlag(val){
                if(val){
                    this.canPurchase = false;
                    if(val == 1 || val == 2){
                        this.orderText = "该车已被预订";
                    }
                    if(val == 3){
                        this.orderText = "该车已被出售";
                    }
                }else{
                    this.canPurchase = true;
                }
            }
            // 添加对比
            _addCompare(){
                // 判读是否有登陆;
                if(header['X-CustomToken']){
                    // 获取缓存
                    var compareIdList = localStorage.getItem("compareIdList");
                    // 是否有缓存;
                    if(compareIdList){
                        var arr = JSON.parse(compareIdList);
                    }else{
                        arr = [];
                    }
                    // 是否order，将flag标签以'/'分隔姓氏存入
                    var compareId = (this.data.flag) ? this.vehicleId + "/" + this.data.flag : this.vehicleId;
                    if(arr.indexOf(compareId) == -1){
                        arr.push(compareId);
                    }
                    localStorage.setItem('compareIdList',JSON.stringify(arr));
                    this.dispatchEvent(new CustomEvent('confirm', {detail:{msg:"添加成功！"} ,bubbles: true, composed: true}));
                }else{
                    this.dispatchEvent(new CustomEvent('login', {}), false);
                }
            }
            //购买
            _purchase (){
                // 判读是否有登陆;
                if(header['X-CustomToken']){
                    location.hash = "#/purchase/" + this.vehicleId;
                }else{
                    this.dispatchEvent(new CustomEvent('login', {}), false);
                }
            }
            // 请求detail
            _checkId(val,page,flag){
                if(val && page == "car-detail"){
                    this.$.getDetail.body = {
                        flag : (flag) ? flag : 0,
                        vehicleId : val
                    }
                    this.$.getDetail.generateRequest();
                }
            }
            // 详细资料响应
            _responDetail (e){
                this.data = e.detail.response[0];
            }
            // 选择panel；
            setPanel(panel){
                var panels = this.shadowRoot.querySelectorAll('.panel_title');
                for(var i = 0 ; i < panels.length; i ++){
                    panels[i].classList.remove('iron-selected');
                    if(panel == panels[i].getAttribute('data-panel')){
                        panels[i].classList.add('iron-selected');
                    }
                }
            }
            _selectPanel(e){
                // 兼容性
                var pathArr = e.composedPath();
                // 判断选中那个li标签;
                if(pathArr[0].tagName == "LI"){
                    var selectPanel = pathArr[0].getAttribute('data-panel');
                    this.setPanel(selectPanel);
                    this.goPanel(selectPanel);
                }
            }
            constructor(){
                super();
            }
            scrollFun(){
                var timeoutRef,that = this;
                // 防止一直频繁调用；
                if(timeoutRef){
                    clearTimeout(timeoutRef);
                }
                timeoutRef = setTimeout(that.scrollEvent(), 50);
            }

            scrollEvent(){
                // 滚动的高度;
                var scrollTop = this.getScrollTop();
                this._panelsOffsetTop();//重新获取所有pannel的offsetTop;
                for(var i = 0 ; i < this.panelsScrollTop.length; i ++){
                    if(i == this.panelsScrollTop.length - 1){
                        this.setPanel(this.panelsScrollTop[i].panel);
                        break;
                    }
                    if(this.panelsScrollTop[i].scrollTop <= scrollTop && scrollTop < this.panelsScrollTop[i+1].scrollTop){
                        this.setPanel(this.panelsScrollTop[i].panel);
                        break;
                    }
                }
            }
            ready(){
                super.ready();
                // 定义滚动监听事件
                this._boundListener = this.scrollFun.bind(this);
            }
            // 获取所有panel对应的offsetTopx及显示需要的scrolltop;
            _panelsOffsetTop(){
                var panels = this.shadowRoot.querySelectorAll('.panel');
                var arr = [];
                for(var i = 0 ; i < panels.length; i++){
                    arr.push({
                        panel : panels[i].id,
                        scrollTop : panels[i].offsetTop - 90
                    })
                }
                this.panelsScrollTop = arr;
            }
            // link to panel;
            goPanel(val){
                if(val){
                    // 通过设置scrolltop滚动;需要考虑兼容;
                    var offsetTop = this.$[val].offsetTop; //选中panel的offsettop；
                    // 减去顶部固定的菜单栏高度;
                    if(navigator.userAgent.indexOf('Chrome') != -1){
                        document.documentElement.scrollTop = offsetTop - 90;
                    }else{ //safari brower
                        document.body.scrollTop = offsetTop - 90;
                    }
                }
            }
            show() {
                this.style.display = 'block';
                this._panelsOffsetTop();
                // 初始化选择“概览”
                this.setPanel('summary');
                window.addEventListener('scroll', this._boundListener);

            }
            hide() {
                this.dispatchEvent(new CustomEvent('hide', {}), false);
                this.style.display = 'none';
                window.removeEventListener('scroll', this._boundListener)
            }
        }
        window.customElements.define(ltDownloadPage.is, ltDownloadPage);
    </script>
</dom-module>

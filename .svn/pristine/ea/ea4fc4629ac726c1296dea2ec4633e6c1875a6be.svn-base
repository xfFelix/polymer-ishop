<link rel="import" href="../../../bower_components/polymer/polymer-element.html" />
<dom-module id="lt-profile-page">
	<template>
		<style include="lt-style">
			:host {
				width: 100%;
				min-height: 500px;
				display: block;
				padding: 15px 25px;
				box-sizing: border-box;
				background: #fff;
			}
			.pageContainer{
				min-height: 500px;
				display: flex;
				flex-direction: column;
				align-items: center;
			}
			.header{
				color: rgba(0,0,0,0.6);
				text-align: center;
				width: 100%;
			}
			.header span:last-child{
				color :  var(--app-primary-blue);
			}
			.avatar{
				margin-top: 10px;
			    width: 100px;
			    height: 100px;
			    border: 1px solid #dedede;
			    border-radius: 100px;
			    box-shadow: 0px 2px 2px #dedede;
			    position: relative;
			    font-size: 14px;
				font-weight: bold;
				overflow: hidden;
			}
			.avatar img{
				width: 100%;
				height: 100%;
			}
			.avatar .editAva{
				position: absolute;
			    bottom: 2px;
			    background: #dedede;
			    height: 100%;
			    width: 100%;
			    opacity: 0;
			    border: 1px;
			    border-radius: 50px;
			    display: flex;
			    justify-content: center;
			    align-items: flex-end;
			}
			.avatar .editAva:hover{
				opacity: 0.7;
			}
			.avatar input{
				opacity: 0;
				height: 100%;
				position: absolute;
				width: 100%;
				bottom: 0;
				cursor: pointer;
			}
			.avatar span{
				width: 80px;
    			text-align: center;
			}
			.profileInfo{
				display: flex;
				flex-direction: column;
				align-items: center;
			}
			.infoFlexBox>*{
				display: inline-block;
			}
			vaadin-combo-box{
				margin: 0;
				width: 100%;
			}

            @media screen and (max-width:620px){

            }
		</style>
		<div class="pageContainer">
			<div class="header">
				当前位置：<span>首页</span> > <span>个人信息</span>
			</div>
			<div class="avatar">
				<img id = "img" alt="">
				<div class="editAva">
					<input id="upload" type="file" on-change="_avatarChange">
					<span>编辑头像(png格式)</span>
				</div>
			</div>
			<div class="profileInfo">
				<div class="infoFlexBox">
					<lt-input label="性*" value="{{userInfo.lastName}}" required></lt-input>
					<lt-input label="名*" value="{{userInfo.firstName}}" required></lt-input>
				</div>
				<lt-input label="电话" value="{{userInfo.mobile}}"></lt-input>
				<vaadin-combo-box label="性别"
								  items="{{genderItems}}"
								  value="{{userInfo.gender}}"></vaadin-combo-box>
				<lt-input label="邮箱" value="{{userInfo.email}}"></lt-input>
			</div>
			<div class="saveButton">
				<lt-button on-click="_saveInfo">保存</lt-button>
			</div>

		</div>

		<!-- 获取客户信息 -->
   		<iron-ajax
   			id="getUserInfo"
   			method="POST" headers = "{{header}}"
   			url = "{{_calUserUrl('member/findById')}}"
            Content-Type="application/json"
            on-response="_responFind">
   		</iron-ajax>
        <!-- 保存客户信息 -->
        <iron-ajax
            id="saveUserInfo"
            method="POST" headers="{{header}}"
            url = "{{_calUserUrl('member/save')}}"
            Content-Type="application/x-www-form-urlencoded"
            on-response="_responSaveUser">
        </iron-ajax>
	</template>
	<script>
		class ltProfilePage extends ltMixin(Polymer.Element){
			static get is(){return "lt-profile-page"}
			static get properties(){
				return {
					genderItems : {
						type : Array,
						value : ()=>{
							return [
								{
									label : "男",
									value : "1"
								},
								{
									label : "女",
									value : "2"
								}
							]
						}
					},
				}
			}
			static get observers (){
				return [

				]
			}
			// 获取用户信息
			_responFind(e){
			    if(e.detail.response.status == 1){
			        this.userInfo = e.detail.response.datas[0];
			        // 是否已经注册
			        this.$.img.src = e.detail.response.ossResponseList[0].url;
			    }
			}
			// 保存用户信息
			_saveInfo(){
				if(this.userInfo.firstName && this.userInfo.lastName){
					this.$.saveUserInfo.body = {
					    username : this.userInfo.username,
					    firstName : this.userInfo.firstName,
					    lastName : this.userInfo.lastName,
					    mobile : this.userInfo.mobile,
					    gender : this.userInfo.gender,
					    email:this.userInfo.email
					}
					this.$.saveUserInfo.generateRequest();
				}
			}
			_responSaveUser(e){
				if(e.detail.response.status == 1){
					this.dispatchEvent(new CustomEvent('confirm', {detail:{msg:"保存成功!"} ,bubbles: true, composed: true}));
					this.$.getUserInfo.generateRequest();
				}
			}
			show(){
             	this.style.display= 'block';
             	// get cart req,if login
             	if(header['X-CustomToken']){
             		this.$.getUserInfo.body = {
             			username : header['X-USERNAME']
             		}
             		this.$.getUserInfo.generateRequest();
             	}else{
             		this.dispatchEvent(new CustomEvent('confirm', {detail:{msg:"请先登录!"} ,bubbles: true, composed: true}));
             		setTimeout(function(){
             			location.hash = "#/home"
             		},2000)
             	}
            }
            hide(){
             	this.dispatchEvent(new CustomEvent('hide',{}),false);
				this.style.display= 'none';
            }
            _avatarChange(){
            	var that = this;
				var file = this.$.upload.files[0];
				// if(file.type !== "image/png"){
				// 	return
				// }
				var url = this.getObjectURL(file);
				this.$.img.src = url;

				var form = new FormData(); // FormData 对象
				form.append("file", file); // 文件对象
				form.append("fileType","MEMBER_AVATAR");
				form.append('mobile',that.userInfo.mobile || "");
				form.append('gender',that.userInfo.gender || "");
				form.append('email',that.userInfo.email || "");
				form.append('username',that.userInfo.username || "");
				form.append('lastName',that.userInfo.lastName || "");
				form.append('firstName',that.userInfo.firstName || "");
	            var xhr = new XMLHttpRequest();  // XMLHttpRequest 对象
	            xhr.open("post", that._calUserUrl('member/save'), true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。
	            xhr.setRequestHeader('X-USERNAME',header['X-USERNAME']);
	            xhr.setRequestHeader('X-CustomToken',header['X-CustomToken']);
	            xhr.onload = that.uploadComplete.bind(that); //请求完成
	            xhr.onerror = that.uploadFailed; //请求失败
	            xhr.send(form); //开始上传，发送form数据
				// var reader = new FileReader();
				// reader.readAsDataURL(file);
				// reader.onload = function () {
				// 	this.payload = reader.result;
				// }.bind(this);
				// reader.onerror = function (error) {
			 //        console.log('Error: ', error);
			 //    };
			}
			uploadComplete(e){
				// 上传成功
				var xhr = JSON.parse(e.target.response)
				if(xhr.status == 1){
					this.dispatchEvent(new CustomEvent('confirm', {detail:{msg:"上传成功!"} ,bubbles: true, composed: true}));
				}

			}
			uploadFailed(e){
				console.log(e)
			}
			getObjectURL(file) {
		        var url = null;
		        if (window.createObjectURL != undefined) {
		            url = window.createObjectURL(file)
		        } else if (window.URL != undefined) {
		            url = window.URL.createObjectURL(file)
		        } else if (window.webkitURL != undefined) {
		            url = window.webkitURL.createObjectURL(file)
		        }
		        return url
		    }

		}
		customElements.define(ltProfilePage.is,ltProfilePage)
	</script>
</dom-module>

<script>
/**
   * Mixin that provides datetime-properties
   *
   * @mixinFunction
   * @polymer
   */
  const ltMixin = (superClass) => {
    return class extends superClass {
            static get properties() {
                return {
                  animateItem:{
                    type:Array
                  },
                  _t: {
                    type:Function,
                    computed: '__computeLocalize(language,resources)'
                  },
                  language:{
                    type: String,
                    value:'zh-HK',
                    notify:true
                  },
                  resources:{
                    type:Object,
                    value:()=>{
                      return lang
                    }
                  },
                  header:{
                    type : Object,
                    value: header
                  }
                }
            }
            // 判断是否App环境
            checkApp () {
              let userAgent = navigator.userAgent.toLowerCase().toString(); //获取userAgent
              if (userAgent.indexOf("android_ishop") + 1 >0) {
                return 'android'
              } else if (navigator.userAgent.indexOf("iOS-iShop") + 1 >0) {
                return 'ios'
              } else if (userAgent.indexOf("windowswechat") + 1 >0) {
                return 'winwechat'
              }
              return false
            }
            StringUtils(str1){
              // str1 = "商品特色：↵●采用光学透镜研磨用超微粒粉末，能有效去除漆面的伤痕，水垢，虫尸等。↵●添加了镜面光泽树脂，使漆面产生镜面光泽效果。↵●去除漆面洗车时产生的细小花痕，呈现闪闪生辉的效果。↵●采用三种新型护车素聚合物独创配方。↵ ↵使用方法：↵1.使用前请确认车色与蜡的适合性。↵2.将车身泥砂油污等彻底清洁干净。↵2.用海绵取适量蜡，稍加用力广泛的涂抹开来（要去除小伤痕及水垢时，请取较多的蜡来回摩擦去除）。↵3.待蜡稍干呈白色状后，用干净的纤维擦拭巾下蜡擦拭即可。↵注意事项：↵1.请勿再风沙多的地方作业。↵2.请勿在大太阳下车身发烫时施工。↵3.重新喷漆或漆面劣化的车身，请先在不明显处测试，确认不会退色或造成斑。↵4.误入眼睛或沾到皮肤等请用清水冲洗，若有不适请就医。↵5.勿置放于日光直射，40度Ç以上及孩童拿得到处。↵6.在通风良好的场所使用本品。↵7.不使用时请盖紧瓶盖。↵成份：蜡，硅酮树酯，超微粒子粉末，石油系溶剂↵包装：附握柄海绵×1↵产地：日本↵容量规格：250g"

              var str2 = str1.replace(/↵/g, '<br/>');
              return str2
            }
            //  获取路径上的参数
            getViewParam () {
              var args = {}
              var query = location.search.substring(1)
              var pairs = query.split('&')
              for (var i = 0; i < pairs.length; i += 1) {
                var pos = pairs[i].indexOf('=')
                if (pos === -1) {
                  continue
                }
                var argname = pairs[i].substring(0, pos)
                var value = pairs[i].substring(pos + 1)
                args[argname] = unescape(value)
              }
              return args
            }
            // 获取路径上的参数
            getParam () {
              var args = {}
              var end = location.hash.indexOf('?') + 1
              var query = location.hash.substring(end)
              var pairs = query.split('&')
              for (var i = 0; i < pairs.length; i += 1) {
                var pos = pairs[i].indexOf('=')
                if (pos === -1) {
                  continue
                }
                var argname = pairs[i].substring(0, pos)
                var value = pairs[i].substring(pos + 1)
                args[argname] = unescape(value)
              }
              return args
            }
            // 获取路径上的hash值
            getHash () {
              let url = location.hash.toString()
              let param = url.split('/')[1]
              return param
            }
            // 更新header
            _updateHeader(token, mobile) {
                this.header["X-CustomToken"] = token;
                this.header["X-USERNAME"] = mobile;
                // 将header放在全局变量中
                header = this.header;
                // 将header放在localStorage中
                localStorage.setItem('xHeader', JSON.stringify(this.header));
            }
            _calURL(url) {
                return baseUrl + url
            }
            _calUserUrl(url){
                // console.log(this.resolveUrl(userUrl));
                // 判读是否部署到线上；
                if(userUrl){
                  return userUrl + url;
                }else{
                  return "https://" + location.host + "/iCanUser/" + url;
                }
            }
            _calPayUrl(url){
              if(payUrl){
                return payUrl + url;
              }else{
                return "https://" + location.host + "/iCanPayment/" + url;
              }
            }
            __computeLocalize(language, resources ){
              return function() {
                  var key = arguments[0];
                  if (!key || !resources || !language || !resources[language])
                    return key || '';
                  // Cache the key/value pairs for the same language, so that we don't
                  // do extra work if we're just reusing strings across an application.
                  var translatedValue = resources[language][key];
                  if (!translatedValue) {
                    return key;
                  }else{
                    return translatedValue
                  }
                };
            }
            //滚动条在Y轴上的滚动距离
            getScrollTop(){
            　　var scrollTop = 0, bodyScrollTop = 0, documentScrollTop = 0;
            　　if(document.body){
            　　　　bodyScrollTop = document.body.scrollTop;
            　　}
            　　if(document.documentElement){
            　　　　documentScrollTop = document.documentElement.scrollTop;
            　　}
            　　scrollTop = (bodyScrollTop - documentScrollTop > 0) ? bodyScrollTop : documentScrollTop;
            　　return scrollTop;
            }
            //文档的总高度
            getScrollHeight(){
            　　var scrollHeight = 0, bodyScrollHeight = 0, documentScrollHeight = 0;
            　　if(document.body){
            　　　　bodyScrollHeight = document.body.scrollHeight;
            　　}
            　　if(document.documentElement){
            　　　　documentScrollHeight = document.documentElement.scrollHeight;
            　　}
            　　scrollHeight = (bodyScrollHeight - documentScrollHeight > 0) ? bodyScrollHeight : documentScrollHeight;
            　　return scrollHeight;
            }
            //浏览器视口的高度
            getWindowHeight(){
            　　var windowHeight = 0;
            　　if(document.compatMode == "CSS1Compat"){
            　　　　windowHeight = document.documentElement.clientHeight;
            　　}else{
            　　　　windowHeight = document.body.clientHeight;
            　　}
            　　return windowHeight;
            }
            // base64 png
            base64Png(str){
              return "data:image/png;base64," + str;
            }
            // 发布时间格式
            _formatTime (val){
                if(val){
                    var date = new Date(val);
                    return date.getFullYear() + "." + (date.getMonth() + 1) + "." + date.getDate();
                }
            }
          }
  }

  window.ltMixin = ltMixin;
</script>

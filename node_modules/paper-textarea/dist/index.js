'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PaperTextarea = function (_React$Component) {
  _inherits(PaperTextarea, _React$Component);

  function PaperTextarea(props) {
    _classCallCheck(this, PaperTextarea);

    var _this = _possibleConstructorReturn(this, (PaperTextarea.__proto__ || Object.getPrototypeOf(PaperTextarea)).call(this, props));

    _this._value = props.value || props.defaultValue || '';
    _this.state = {
      touched: false,
      dirty: !!_this._value,
      focused: false
    };
    ['handleBlurCapture', 'handleChange', 'handleFocus', 'handleKeyDown', 'recalculateSize'].forEach(function (meth) {
      return _this[meth] = _this[meth].bind(_this);
    });
    _this.timeout = null;
    _this.$el = null;
    _this.height = 0;
    return _this;
  }

  _createClass(PaperTextarea, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.height = this.recalculateSize();
      window.addEventListener('resize', this.recalculateSize);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value != null) this._value = nextProps.value;
      this.setState({ dirty: !!this._value });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.height = this.recalculateSize();
      var textarea = this.$el;
      if (this.shouldDisplayError()) textarea.setCustomValidity(this.props.error);else textarea.setCustomValidity('');
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.recalculateSize);
      if (this.timeout) clearTimeout(this.timeout);
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      console.warn('<PaperTextarea>.getValue() has been deprecated and will be removed ' + 'in the next version of paper-textarea.');
      return this.$el.value;
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      console.warn('<PaperTextarea>.cancel() has been deprecated and will be removed ' + 'in the next version of paper-textarea.');
      this.$el.value = '';
      this.setState({ dirty: false });
    }
  }, {
    key: 'handleBlurCapture',
    value: function handleBlurCapture(e) {
      if (this.props.onBlurCapture) this.props.onBlurCapture(e);
      this.setState({ dirty: !!this._value, focused: false });
    }
  }, {
    key: 'handleChange',
    value: function handleChange(e) {
      var _this2 = this;

      this._value = e.target.value;
      var prevHeight = this.height;
      var height = this.height = this.recalculateSize();
      if (this.props.onChange) this.props.onChange(e);
      if (this.props.onResize && prevHeight !== height) this.props.onResize(prevHeight, height);
      this.setState({ dirty: !!this._value });

      // Disable transition to prevent the label from flying around
      // when deleting the entire content of the textarea
      if (!this._value) {
        this.setState({ disableTransition: true }, function () {
          _this2.timeout = setTimeout(function () {
            _this2.setState({ disableTransition: false });
          }, 0);
        });
      }
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(e) {
      if (this.props.onFocus) this.props.onFocus(e);
      this.setState({ touched: true, focused: true });
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      if (this.props.onKeyDown) this.props.onKeyDown(e);
      if (!this.state.touched) this.setState({ touched: true });
    }
  }, {
    key: 'recalculateSize',
    value: function recalculateSize() {
      var diff = void 0,
          $textarea = this.$el;
      if (window.getComputedStyle && $textarea) {
        var styles = window.getComputedStyle($textarea);
        // If the textarea is set to border-box, it's not necessary to
        // subtract the padding.
        if (styles.getPropertyValue('box-sizing') === 'border-box' || styles.getPropertyValue('-moz-box-sizing') === 'border-box' || styles.getPropertyValue('-webkit-box-sizing') === 'border-box') {
          diff = 0;
        } else {
          diff = parseInt(styles.getPropertyValue('padding-bottom') || 0, 10) + parseInt(styles.getPropertyValue('padding-top') || 0, 10);
        }
      } else diff = 0;
      $textarea.style.height = 'auto';
      $textarea.style.height = $textarea.scrollHeight - diff + 'px';
      return $textarea.scrollHeight - diff;
    }
  }, {
    key: 'shouldDisplayError',
    value: function shouldDisplayError() {
      return this.props.error && (this.state.touched && this.state.dirty || this.props.mustDisplayError);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props;
      var floatLabel = _props.floatLabel;
      var className = _props.className;
      var label = _props.label;
      var error = _props.error;
      var name = _props.name;
      var placeholder = _props.placeholder;
      var required = _props.required;
      var textareaProps = _objectWithoutProperties(_props, ['floatLabel', 'className', 'label', 'error', 'name', 'placeholder', 'required']);
      var _state = this.state;
      var dirty = _state.dirty;
      var touched = _state.touched;
      var focused = _state.focused;
      var disableTransition = _state.disableTransition;
      var containerClassNames = (0, _classnames3.default)(_defineProperty({
        'paper-textarea': true,
        'float-label': !!floatLabel
      }, className, !!className));
      var textareaClassNames = (0, _classnames3.default)({
        dirty: dirty,
        touched: touched
      });

      if (placeholder && !focused) placeholder = undefined;
      var labelStyles = {};
      if (floatLabel) {
        if (dirty) {
          var height = this.height && this.height + 9 || 27,
              extraPadding = (height - 27) / 18.6675 * 8;
          labelStyles = {
            WebkitTransform: 'scale(0.7) translate3d(0, -' + (height + extraPadding) + 'px, 0)',
            transform: 'scale(0.7) translate3d(0, -' + (height + extraPadding) + 'px, 0)',
            transition: 'none'
          };
        } else if (disableTransition) {
          labelStyles.transition = 'none';
        }
      }
      return _react2.default.createElement(
        'div',
        { className: containerClassNames },
        _react2.default.createElement('textarea', _extends({}, textareaProps, {
          name: name,
          placeholder: placeholder,
          required: required,
          ref: function ref(el) {
            return _this3.$el = el;
          },
          className: textareaClassNames,
          rows: '1',
          onBlurCapture: this.handleBlurCapture,
          onChange: this.handleChange,
          onFocus: this.handleFocus,
          onKeyDown: this.handleKeyDown
        })),
        _react2.default.createElement(
          'label',
          { htmlFor: name, style: labelStyles },
          label
        ),
        _react2.default.createElement('span', { className: 'border-line' }),
        this.shouldDisplayError() && _react2.default.createElement(
          'span',
          { className: 'error' },
          error
        )
      );
    }
  }]);

  return PaperTextarea;
}(_react2.default.Component);

exports.default = PaperTextarea;
var _React$PropTypes = _react2.default.PropTypes;
var bool = _React$PropTypes.bool;
var func = _React$PropTypes.func;
var string = _React$PropTypes.string;

PaperTextarea.propTypes = {
  className: string,
  defaultValue: string,
  error: string,
  floatLabel: bool,
  label: string.isRequired,
  mustDisplayError: bool,
  name: string.isRequired,
  onBlurCapture: func,
  onChange: func,
  onFocus: func,
  onKeyDown: func,
  onResize: func,
  placeholder: string,
  required: bool,
  value: string
};
PaperTextarea.defaultProps = {
  floatLabel: true
};
module.exports = exports['default'];